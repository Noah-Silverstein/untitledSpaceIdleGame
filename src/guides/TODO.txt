
//**---------------------------**//
    GAME THINGS TO DO
//**--------------------------**//

!STORING INFO VIA COOKIES AND CACHING DATA!
    when first loading up you'll do a bunch of calculations that need to be stored and then be able to 
    be retrieved easily rather than calculated again
---> Read and write MINERAL DATA ON FIRST STARTUP

CHANGE CSS FILES
    change css files to 1 global.css and the rest to xxxxx.modules.css. Modules allow for scoped css and avoids name conflicts

CAMERA DOES WEIRD STUFF WHEN SELECTING A planet
    rework camera init maybe? seems weird now either remove abstract or create camera init in Base class and  
        pass controlls, etc through via args

DRAWING 
    Figure out scaling for planetary distances and PLANETS  
    -> planetary scales will probably be logarithmic 
    -> distance from sun logarithmic but moons might be fixed since they're so much closer


SCENE BASE Class   
    extend class for planetary system view
    extend class for planet moon view
    extend 
    
2. Handle Resize Events in the Base Class

If you adopt a BaseScene approach, consider including the resize logic within that class. This way, every scene automatically adjusts to the container without repeating code. Ensure the base class provides a setRendererSize method that specific scenes can call if needed.
3. Manage Cursor Styles More Consistently

You are currently handling cursor style changes directly in the mouse move handler. This is fine, but if you extend your input interactions (e.g., adding keyboard or touch inputs), consider centralizing cursor management:

    Add a method in your InputHandler to handle cursor styles based on different conditions.
    This could also help you avoid scenarios where the cursor gets stuck in a certain style if an event is missed.

GAME
---> classes for 
    GAME LOOP
    Separation of Responsibilities: Currently, the useEffect is handling various tasks:

    Setting up the scene, camera, and renderer
    Initializing the canvas and event listeners
    Creating and managing game objects (e.g., planets, stars)
    Handling the animation and game logic loops
    Input handling

ALL these should be seperate classes

RESEARCH TRE1. 
    Research Tree Data Structure

   
    array of objects to represent the nodes, where each node contains:

        id: A unique identifier for the node.
        name: The name of the research node.
        cost: The cost of unlocking the research.
        dependencies: An array of node IDs that need to be unlocked before this node can be unlocked.
        unlocked: A boolean to track whether this research is unlocked or not.


//**---------------------------**//
    PLANETARY SYSTEM THINGS TO DO
//**--------------------------**//

RETHINK NAMING
ADD INTERNAL IDs?
CHECK HARD CODED VARIABLES

---------------MATERIALS -------------------------
ADD ORES (https://en.wikipedia.org/wiki/Ore)
-------------------> Possible way to handle mining/extracting resources
    if specific mineral is available on planet AND extraction method is researched then you can mine for that Ore
    ---->materials in crust are easier to extract! , mantle and core ore extraction = harder 


ASTRONOMICAL BODY
Currently most things depend on MASS BUT you don't need to pass a mass to initialize astronomical BODY
how can i require mass to be necessary for astronomical body but NOT necessary for Certain Sub classes 
(for example creating a terran planet should have an optional mass argument otherwise it gens a random mass)

RING SYSTEMS

INCLINATION AND AXIAL TILT 
    drawing and gen

MOONS 
----> moon lower bound is currently dictated by planet creation since moons are generated by PLANET.genRandomFromMass
    need either a seperate class for moons or planetary system needs a way to generate moons
    should be pretty easy (just pass [TERRAN] and small mass) -> mass can be determined I think based on parent body
    also number of moons 

PLANETS
    hill radius is only for single star systems?????

STAR- PLANET
    replace random between 2 with NORMAL DISTIBUTION -> MEAN STDDIV 
    zones for planet formation iceline zone beyond which rocky planets are less common due to 

PLANETARY system

    figure out rules governing system formation (get a simple formula/algorithm to populate systems)
    also moons

STARS
    EARLY/MID/LATE?
    hill sphere is set to 0 automatically
    Tidal lock zone?
